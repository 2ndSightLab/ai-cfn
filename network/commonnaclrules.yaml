AWSTemplateFormatVersion: '2010-09-09'
Description: 'Add protocol rules to an existing NACL based on rule type (ingress or egress)'

Parameters:
  NetworkAclId:
    Type: String
    Description: ID of the existing Network ACL to modify

  RuleType:
    Type: String
    Description: Type of rules to create (ingress or egress)
    Default: ingress
    AllowedValues: [ingress, egress]

  BlockRFC1918:
    Type: String
    Description: Block RFC1918 private address ranges (10.0.0.0/8, 172.16.0.0/12, 192.168.0.0/16)
    Default: false
    AllowedValues: [true, false]

  # Protocol Parameters
  EnableHTTPS:
    Type: String
    Description: Enable HTTPS (TCP port 443)
    Default: false
    AllowedValues: [true, false]

  EnableHTTP:
    Type: String
    Description: Enable HTTP (TCP port 80)
    Default: false
    AllowedValues: [true, false]

  EnableSSH:
    Type: String
    Description: Enable SSH (TCP port 22)
    Default: false
    AllowedValues: [true, false]

  EnableRDP:
    Type: String
    Description: Enable RDP (TCP port 3389)
    Default: false
    AllowedValues: [true, false]

  EnableSMTP:
    Type: String
    Description: Enable SMTP (TCP port 25)
    Default: false
    AllowedValues: [true, false]

  EnableSMTPS:
    Type: String
    Description: Enable SMTPS (TCP port 465)
    Default: false
    AllowedValues: [true, false]

  EnableDNSUDP:
    Type: String
    Description: Enable DNS over UDP (UDP port 53)
    Default: false
    AllowedValues: [true, false]

  EnableDNSTCP:
    Type: String
    Description: Enable DNS over TCP (TCP port 53)
    Default: false
    AllowedValues: [true, false]

Conditions:
  IsIngress: !Equals [!Ref RuleType, 'ingress']
  IsEgress: !Equals [!Ref RuleType, 'egress']
  RFC1918Blocked: !Equals [!Ref BlockRFC1918, 'true']
  
  # Protocol Conditions
  HTTPSEnabled: !Equals [!Ref EnableHTTPS, 'true']
  HTTPEnabled: !Equals [!Ref EnableHTTP, 'true']
  SSHEnabled: !Equals [!Ref EnableSSH, 'true']
  RDPEnabled: !Equals [!Ref EnableRDP, 'true']
  SMTPEnabled: !Equals [!Ref EnableSMTP, 'true']
  SMTPSEnabled: !Equals [!Ref EnableSMTPS, 'true']
  DNSUDPEnabled: !Equals [!Ref EnableDNSUDP, 'true']
  DNSTCPEnabled: !Equals [!Ref EnableDNSTCP, 'true']
  
  # Need TCP ephemeral ports if any TCP protocol is enabled
  NeedTCPEphemeralPorts: !Or [
    !Condition HTTPSEnabled,
    !Condition HTTPEnabled,
    !Condition SSHEnabled,
    !Condition RDPEnabled,
    !Condition SMTPEnabled,
    !Condition SMTPSEnabled,
    !Condition DNSTCPEnabled
  ]

Resources:
  # RFC1918 Blocking Rules
  RFC1918Block10:
    Type: AWS::EC2::NetworkAclEntry
    Condition: RFC1918Blocked
    Properties:
      NetworkAclId: !Ref NetworkAclId
      RuleNumber: 10
      Protocol: -1  # All traffic
      RuleAction: deny
      Egress: !If [IsEgress, true, false]
      CidrBlock: 10.0.0.0/8

  RFC1918Block172:
    Type: AWS::EC2::NetworkAclEntry
    Condition: RFC1918Blocked
    Properties:
      NetworkAclId: !Ref NetworkAclId
      RuleNumber: 20
      Protocol: -1  # All traffic
      RuleAction: deny
      Egress: !If [IsEgress, true, false]
      CidrBlock: 172.16.0.0/12

  RFC1918Block192:
    Type: AWS::EC2::NetworkAclEntry
    Condition: RFC1918Blocked
    Properties:
      NetworkAclId: !Ref NetworkAclId
      RuleNumber: 30
      Protocol: -1  # All traffic
      RuleAction: deny
      Egress: !If [IsEgress, true, false]
      CidrBlock: 192.168.0.0/16

  # HTTPS Rule
  HTTPSRule:
    Type: AWS::EC2::NetworkAclEntry
    Condition: HTTPSEnabled
    Properties:
      NetworkAclId: !Ref NetworkAclId
      RuleNumber: 100
      Protocol: 6  # TCP
      RuleAction: allow
      Egress: !If [IsEgress, true, false]
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 443
        To: 443

  # HTTP Rule
  HTTPRule:
    Type: AWS::EC2::NetworkAclEntry
    Condition: HTTPEnabled
    Properties:
      NetworkAclId: !Ref NetworkAclId
      RuleNumber: 110
      Protocol: 6  # TCP
      RuleAction: allow
      Egress: !If [IsEgress, true, false]
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 80
        To: 80

  # SSH Rule
  SSHRule:
    Type: AWS::EC2::NetworkAclEntry
    Condition: SSHEnabled
    Properties:
      NetworkAclId: !Ref NetworkAclId
      RuleNumber: 120
      Protocol: 6  # TCP
      RuleAction: allow
      Egress: !If [IsEgress, true, false]
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 22
        To: 22

  # RDP Rule
  RDPRule:
    Type: AWS::EC2::NetworkAclEntry
    Condition: RDPEnabled
    Properties:
      NetworkAclId: !Ref NetworkAclId
      RuleNumber: 130
      Protocol: 6  # TCP
      RuleAction: allow
      Egress: !If [IsEgress, true, false]
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 3389
        To: 3389

  # SMTP Rule
  SMTPRule:
    Type: AWS::EC2::NetworkAclEntry
    Condition: SMTPEnabled
    Properties:
      NetworkAclId: !Ref NetworkAclId
      RuleNumber: 140
      Protocol: 6  # TCP
      RuleAction: allow
      Egress: !If [IsEgress, true, false]
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 25
        To: 25

  # SMTPS Rule
  SMTPSRule:
    Type: AWS::EC2::NetworkAclEntry
    Condition: SMTPSEnabled
    Properties:
      NetworkAclId: !Ref NetworkAclId
      RuleNumber: 150
      Protocol: 6  # TCP
      RuleAction: allow
      Egress: !If [IsEgress, true, false]
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 465
        To: 465

  # DNS UDP Rule
  DNSUDPRule:
    Type: AWS::EC2::NetworkAclEntry
    Condition: DNSUDPEnabled
    Properties:
      NetworkAclId: !Ref NetworkAclId
      RuleNumber: 160
      Protocol: 17  # UDP
      RuleAction: allow
      Egress: !If [IsEgress, true, false]
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 53
        To: 53

  # DNS TCP Rule
  DNSTCPRule:
    Type: AWS::EC2::NetworkAclEntry
    Condition: DNSTCPEnabled
    Properties:
      NetworkAclId: !Ref NetworkAclId
      RuleNumber: 170
      Protocol: 6  # TCP
      RuleAction: allow
      Egress: !If [IsEgress, true, false]
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 53
        To: 53

  # TCP Ephemeral Ports Rule - opposite direction of main rules
  TCPEphemeralPortsRule:
    Type: AWS::EC2::NetworkAclEntry
    Condition: NeedTCPEphemeralPorts
    Properties:
      NetworkAclId: !Ref NetworkAclId
      RuleNumber: 900
      Protocol: 6  # TCP
      RuleAction: allow
      Egress: !If [IsIngress, true, false]  # Opposite of RuleType
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 1024
        To: 65535

Outputs:
  ModifiedNetworkAclId:
    Description: The ID of the modified NACL
    Value: !Ref NetworkAclId
  RuleTypeCreated:
    Description: Type of rules created
    Value: !Ref RuleType
  TCPEphemeralPortsAdded:
    Description: Whether TCP ephemeral port rules were added
    Value: !If [NeedTCPEphemeralPorts, 'Yes', 'No']
