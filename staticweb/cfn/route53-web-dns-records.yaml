AWSTemplateFormatVersion: '2010-09-09'
Description: 'Route 53 Hosted Zone for S3 static website with CloudFront integration'

Parameters:
  HostedZoneId:
    Type: String
    Description: 'The hosted zone id'
    
  DomainName:
    Type: String
    Description: 'The domain name for the hosted zone (e.g., example.com)'
  
  DomainType:
    Type: String
    Default: 'WWW'
    Description: 'Type of domain setup (Basic: example.com only, WWW: example.com and www.example.com, Wildcard: example.com and *.example.com)'
    AllowedValues:
      - 'Basic'
      - 'WWW'
      - 'Wildcard'
      - 'Subdomains'
  
  CreateS3Records:
    Type: String
    Description: 'Create DNS records for direct S3 website endpoint (not needed if using CloudFront)'
    Default: 'false'
    AllowedValues:
      - 'true'
      - 'false'
  
  CloudFrontDomainName:
    Type: String
    Description: 'The CloudFront distribution domain name (e.g., d1234abcdef.cloudfront.net)'
    Default: ''
    
  CreateCloudFrontRecords:
    Type: String
    Description: 'Create DNS records for CloudFront distribution'
    Default: 'true'
    AllowedValues:
      - 'true'
      - 'false'

Mappings:
  RegionMap:
    us-east-1:
      S3HostedZoneId: Z3AQBSTGFYJSTF
    us-east-2:
      S3HostedZoneId: Z2O1EMRO9K5GLX
    us-west-1:
      S3HostedZoneId: Z2F56UZL2M1ACD
    us-west-2:
      S3HostedZoneId: Z3BJ6K6RIION7M
    ca-central-1:
      S3HostedZoneId: Z1QDHH18159H29
    eu-west-1:
      S3HostedZoneId: Z1BKCTXD74EZPE
    eu-west-2:
      S3HostedZoneId: Z3GKZC51ZF0DB4
    eu-west-3:
      S3HostedZoneId: Z3R1K369G5AVDG
    eu-central-1:
      S3HostedZoneId: Z21DNDUVLTQW6Q
    ap-south-1:
      S3HostedZoneId: Z11RGJOFQNVJUP
    ap-northeast-1:
      S3HostedZoneId: Z2M4EHUR26P7ZW
    ap-northeast-2:
      S3HostedZoneId: Z3W03O7B5YMIYP
    ap-northeast-3:
      S3HostedZoneId: Z2YQB5RD63NC85
    ap-southeast-1:
      S3HostedZoneId: Z3O0J2DXBE1FTB
    ap-southeast-2:
      S3HostedZoneId: Z1WCIGYICN2BYD
    sa-east-1:
      S3HostedZoneId: Z7KQH4QJS55SO

Conditions:
  HasCloudFrontDomain: !Not [!Equals [!Ref CloudFrontDomainName, '']]
  CreateS3WebsiteRecords: !Equals [!Ref CreateS3Records, 'true']
  CreateCloudFrontDNSRecords: !And
    - !Equals [!Ref CreateCloudFrontRecords, 'true']
    - !Condition HasCloudFrontDomain
  IsWWWDomain: !Equals [!Ref DomainType, 'WWW']
  IsWildcardDomain: !Equals [!Ref DomainType, 'Wildcard']
  CreateWWWS3Record: !And
    - !Condition IsWWWDomain
    - !Condition CreateS3WebsiteRecords
  CreateWildcardS3Record: !And
    - !Condition IsWildcardDomain
    - !Condition CreateS3WebsiteRecords
  CreateWWWCloudFrontRecord: !And
    - !Condition IsWWWDomain
    - !Condition CreateCloudFrontDNSRecords
  CreateWildcardCloudFrontRecord: !And
    - !Condition IsWildcardDomain
    - !Condition CreateCloudFrontDNSRecords

        
  S3WebsiteRecord:
    Type: AWS::Route53::RecordSet
    Condition: CreateS3WebsiteRecords
    Properties:
      HostedZoneId: !Ref HostedZone
      Name: !Ref DomainName
      Type: A
      AliasTarget:
        DNSName: !Sub 's3-website-${AWS::Region}.amazonaws.com'
        HostedZoneId: !FindInMap [RegionMap, !Ref 'AWS::Region', S3HostedZoneId]
        EvaluateTargetHealth: false

  WWWS3Record:
    Type: AWS::Route53::RecordSet
    Condition: CreateWWWS3Record
    Properties:
      HostedZoneId: !Ref HostedZone
      Name: !Sub 'www.${DomainName}'
      Type: A
      AliasTarget:
        DNSName: !Sub 's3-website-${AWS::Region}.amazonaws.com'
        HostedZoneId: !FindInMap [RegionMap, !Ref 'AWS::Region', S3HostedZoneId]
        EvaluateTargetHealth: false
        
  WildcardS3Record:
    Type: AWS::Route53::RecordSet
    Condition: CreateWildcardS3Record
    Properties:
      HostedZoneId: !Ref HostedZone
      Name: !Sub '*.${DomainName}'
      Type: A
      AliasTarget:
        DNSName: !Sub 's3-website-${AWS::Region}.amazonaws.com'
        HostedZoneId: !FindInMap [RegionMap, !Ref 'AWS::Region', S3HostedZoneId]
        EvaluateTargetHealth: false

  CloudFrontRecord:
    Type: AWS::Route53::RecordSet
    Condition: CreateCloudFrontDNSRecords
    Properties:
      HostedZoneId: !Ref HostedZone
      Name: !Ref DomainName
      Type: A
      AliasTarget:
        DNSName: !Ref CloudFrontDomainName
        HostedZoneId: Z2FDTNDATAQYW2
        EvaluateTargetHealth: false
        
  WWWCloudFrontRecord:
    Type: AWS::Route53::RecordSet
    Condition: CreateWWWCloudFrontRecord
    Properties:
      HostedZoneId: !Ref HostedZone
      Name: !Sub 'www.${DomainName}'
      Type: A
      AliasTarget:
        DNSName: !Ref CloudFrontDomainName
        HostedZoneId: Z2FDTNDATAQYW2
        EvaluateTargetHealth: false

  WildcardCloudFrontRecord:
    Type: AWS::Route53::RecordSet
    Condition: CreateWildcardCloudFrontRecord
    Properties:
      HostedZoneId: !Ref HostedZone
      Name: !Sub '*.${DomainName}'
      Type: A
      AliasTarget:
        DNSName: !Ref CloudFrontDomainName
        HostedZoneId: Z2FDTNDATAQYW2
        EvaluateTargetHealth: false


Outputs:
  HostedZoneId:
    Description: 'Hosted Zone ID'
    Value: !Ref HostedZone
    Export:
      Name: !Sub '${AWS::StackName}-HostedZoneId'

  DomainName:
    Description: 'Domain Name'
    Value: !Ref DomainName
    Export:
      Name: !Sub '${AWS::StackName}-DomainName'
      
  DomainType:
    Description: 'Domain Type'
    Value: !Ref DomainType
    Export:
      Name: !Sub '${AWS::StackName}-DomainType'
      
  WildcardDomainName:
    Condition: IsWildcardDomain
    Description: 'Wildcard Domain Name'
    Value: !If [IsWildcardDomain, !Sub '*.${DomainName}', 'Not Enabled']
    Export:
      Name: !Sub '${AWS::StackName}-WildcardDomainName'
      
  WWWDomainName:
    Description: 'WWW Domain Name'
    Value: !If [IsWWWDomain, !Sub 'www.${DomainName}', 'Not Enabled']
    Export:
      Name: !Sub '${AWS::StackName}-WWWDomainName'
      
  NameServers:
    Description: 'Name Servers (update these in your domain registrar)'
    Value: !Join [', ', !GetAtt HostedZone.NameServers]
