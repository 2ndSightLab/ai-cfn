AWSTemplateFormatVersion: '2010-09-09'
Description: 'S3 Bucket for CloudFront Access Logs with Security Best Practices'

Parameters:
  LogRetentionDays:
    Type: Number
    Description: 'Number of days to retain CloudFront logs before deletion'
    Default: 365
    MinValue: 30
    
  TransitionToStandardIADays:
    Type: Number
    Description: 'Number of days before transitioning logs to Standard-IA storage'
    Default: 30
    MinValue: 30
    
  TransitionToGlacierDays:
    Type: Number
    Description: 'Number of days before transitioning logs to Glacier storage'
    Default: 90
    MinValue: 90
    
  BucketName:
    Type: String
    
  EnableAccessLogging:
    Type: String
    Description: 'Enable S3 server access logging for the logs bucket itself'
    Default: 'true'
    AllowedValues:
      - 'true'
      - 'false'

Conditions:
  HasBucketNameSuffix: !Not [!Equals [!Ref BucketNameSuffix, '']]
  EnableS3AccessLogging: !Equals [!Ref EnableAccessLogging, 'true']

Resources:
  CloudFrontLogsBucket:
    Type: 'AWS::S3::Bucket'
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      BucketName: !Ref BucketName
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: 'AES256'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LifecycleConfiguration:
        Rules:
          - Id: LogRetentionRule
            Status: Enabled
            Transitions:
              - StorageClass: STANDARD_IA
                TransitionInDays: !Ref TransitionToStandardIADays
              - StorageClass: GLACIER
                TransitionInDays: !Ref TransitionToGlacierDays
            ExpirationInDays: !Ref LogRetentionDays
            NoncurrentVersionExpirationInDays: 30
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerPreferred
      LoggingConfiguration: !If
        - EnableS3AccessLogging
        - DestinationBucketName: !Ref S3AccessLogsBucket
          LogFilePrefix: 'cloudfront-logs-bucket-access/'
        - !Ref AWS::NoValue

  CloudFrontLogsBucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref CloudFrontLogsBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: 'AllowCloudFrontServicePrincipal'
            Effect: Allow
            Principal:
              Service: 'cloudfront.amazonaws.com'
            Action: 's3:PutObject'
            Resource: !Sub '${CloudFrontLogsBucket.Arn}/*'
          - Sid: 'EnforceHTTPS'
            Effect: Deny
            Principal: '*'
            Action: 's3:*'
            Resource: 
              - !Sub '${CloudFrontLogsBucket.Arn}'
              - !Sub '${CloudFrontLogsBucket.Arn}/*'
            Condition:
              Bool:
                'aws:SecureTransport': false
          - Sid: 'DenyUnencryptedObjectUploads'
            Effect: Deny
            Principal: '*'
            Action: 's3:PutObject'
            Resource: !Sub '${CloudFrontLogsBucket.Arn}/*'
            Condition:
              StringNotEquals:
                's3:x-amz-server-side-encryption': 'AES256'

  S3AccessLogsBucket:
    Type: 'AWS::S3::Bucket'
    Condition: EnableS3AccessLogging
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      BucketName: !If 
        - HasBucketNameSuffix
        - !Sub 's3-access-logs-${AWS::AccountId}-${BucketNameSuffix}'
        - !Sub 's3-access-logs-${AWS::AccountId}'
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: 'AES256'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LifecycleConfiguration:
        Rules:
          - Id: AccessLogRetentionRule
            Status: Enabled
            ExpirationInDays: 90
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerPreferred

  S3AccessLogsBucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Condition: EnableS3AccessLogging
    Properties:
      Bucket: !Ref S3AccessLogsBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: 'EnforceHTTPS'
            Effect: Deny
            Principal: '*'
            Action: 's3:*'
            Resource: 
              - !Sub '${S3AccessLogsBucket.Arn}'
              - !Sub '${S3AccessLogsBucket.Arn}/*'
            Condition:
              Bool:
                'aws:SecureTransport': false
          - Sid: 'DenyUnencryptedObjectUploads'
            Effect: Deny
            Principal: '*'
            Action: 's3:PutObject'
            Resource: !Sub '${S3AccessLogsBucket.Arn}/*'
            Condition:
              StringNotEquals:
                's3:x-amz-server-side-encryption': 'AES256'

Outputs:
  CloudFrontLogsBucketName:
    Description: 'Name of the S3 bucket for CloudFront logs'
    Value: !Ref CloudFrontLogsBucket
    Export:
      Name: !Sub '${AWS::StackName}-CloudFrontLogsBucketName'
      
  CloudFrontLogsBucketArn:
    Description: 'ARN of the S3 bucket for CloudFront logs'
    Value: !GetAtt CloudFrontLogsBucket.Arn
    Export:
      Name: !Sub '${AWS::StackName}-CloudFrontLogsBucketArn'
      
  CloudFrontLogsBucketDomainName:
    Description: 'Domain name of the S3 bucket for CloudFront logs'
    Value: !GetAtt CloudFrontLogsBucket.DomainName
    Export:
      Name: !Sub '${AWS::StackName}-CloudFrontLogsBucketDomainName'
